// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// log_add_exp
double log_add_exp(double x, double y);
RcppExport SEXP _slcm_log_add_exp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(log_add_exp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// log_sum_exp
double log_sum_exp(NumericVector x);
RcppExport SEXP _slcm_log_sum_exp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(log_sum_exp(x));
    return rcpp_result_gen;
END_RCPP
}
// calcModel
List calcModel(IntegerVector y, int nobs, IntegerVector nvar, IntegerVector nlev, NumericVector par, LogicalVector fix0, IntegerVector ref, int nlv, int nrl, int nlf, int npi, int ntau, int nrho, IntegerVector ul, IntegerVector vl, IntegerVector lf, IntegerVector tr, IntegerVector rt, IntegerVector eqrl, IntegerVector eqlf, IntegerVector nc, IntegerVector nk, IntegerVector nl, IntegerVector ncl, IntegerVector nc_pi, IntegerVector nk_tau, IntegerVector nl_tau, IntegerVector nc_rho, IntegerVector nr_rho);
RcppExport SEXP _slcm_calcModel(SEXP ySEXP, SEXP nobsSEXP, SEXP nvarSEXP, SEXP nlevSEXP, SEXP parSEXP, SEXP fix0SEXP, SEXP refSEXP, SEXP nlvSEXP, SEXP nrlSEXP, SEXP nlfSEXP, SEXP npiSEXP, SEXP ntauSEXP, SEXP nrhoSEXP, SEXP ulSEXP, SEXP vlSEXP, SEXP lfSEXP, SEXP trSEXP, SEXP rtSEXP, SEXP eqrlSEXP, SEXP eqlfSEXP, SEXP ncSEXP, SEXP nkSEXP, SEXP nlSEXP, SEXP nclSEXP, SEXP nc_piSEXP, SEXP nk_tauSEXP, SEXP nl_tauSEXP, SEXP nc_rhoSEXP, SEXP nr_rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nvar(nvarSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nlev(nlevSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type fix0(fix0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ref(refSEXP);
    Rcpp::traits::input_parameter< int >::type nlv(nlvSEXP);
    Rcpp::traits::input_parameter< int >::type nrl(nrlSEXP);
    Rcpp::traits::input_parameter< int >::type nlf(nlfSEXP);
    Rcpp::traits::input_parameter< int >::type npi(npiSEXP);
    Rcpp::traits::input_parameter< int >::type ntau(ntauSEXP);
    Rcpp::traits::input_parameter< int >::type nrho(nrhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ul(ulSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type vl(vlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type lf(lfSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tr(trSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type eqrl(eqrlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type eqlf(eqlfSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ncl(nclSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nc_pi(nc_piSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nk_tau(nk_tauSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nl_tau(nl_tauSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nc_rho(nc_rhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nr_rho(nr_rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(calcModel(y, nobs, nvar, nlev, par, fix0, ref, nlv, nrl, nlf, npi, ntau, nrho, ul, vl, lf, tr, rt, eqrl, eqlf, nc, nk, nl, ncl, nc_pi, nk_tau, nl_tau, nc_rho, nr_rho));
    return rcpp_result_gen;
END_RCPP
}
// em_est
List em_est(IntegerVector y, int nobs, IntegerVector nvar, IntegerVector nlev, NumericVector par_origin, LogicalVector fix0, int nlv, int nrl, int nlf, int npi, int ntau, int nrho, IntegerVector ul, IntegerVector vl, IntegerVector lf, IntegerVector tr, IntegerVector rt, IntegerVector eqrl, IntegerVector eqlf, IntegerVector nc, IntegerVector nk, IntegerVector nl, IntegerVector ncl, IntegerVector nc_pi, IntegerVector nk_tau, IntegerVector nl_tau, IntegerVector nc_rho, IntegerVector nr_rho, int max_iter, double tol, bool verbose, int newiter);
RcppExport SEXP _slcm_em_est(SEXP ySEXP, SEXP nobsSEXP, SEXP nvarSEXP, SEXP nlevSEXP, SEXP par_originSEXP, SEXP fix0SEXP, SEXP nlvSEXP, SEXP nrlSEXP, SEXP nlfSEXP, SEXP npiSEXP, SEXP ntauSEXP, SEXP nrhoSEXP, SEXP ulSEXP, SEXP vlSEXP, SEXP lfSEXP, SEXP trSEXP, SEXP rtSEXP, SEXP eqrlSEXP, SEXP eqlfSEXP, SEXP ncSEXP, SEXP nkSEXP, SEXP nlSEXP, SEXP nclSEXP, SEXP nc_piSEXP, SEXP nk_tauSEXP, SEXP nl_tauSEXP, SEXP nc_rhoSEXP, SEXP nr_rhoSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP verboseSEXP, SEXP newiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nvar(nvarSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nlev(nlevSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type par_origin(par_originSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type fix0(fix0SEXP);
    Rcpp::traits::input_parameter< int >::type nlv(nlvSEXP);
    Rcpp::traits::input_parameter< int >::type nrl(nrlSEXP);
    Rcpp::traits::input_parameter< int >::type nlf(nlfSEXP);
    Rcpp::traits::input_parameter< int >::type npi(npiSEXP);
    Rcpp::traits::input_parameter< int >::type ntau(ntauSEXP);
    Rcpp::traits::input_parameter< int >::type nrho(nrhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ul(ulSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type vl(vlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type lf(lfSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tr(trSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type eqrl(eqrlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type eqlf(eqlfSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ncl(nclSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nc_pi(nc_piSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nk_tau(nk_tauSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nl_tau(nl_tauSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nc_rho(nc_rhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nr_rho(nr_rhoSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type newiter(newiterSEXP);
    rcpp_result_gen = Rcpp::wrap(em_est(y, nobs, nvar, nlev, par_origin, fix0, nlv, nrl, nlf, npi, ntau, nrho, ul, vl, lf, tr, rt, eqrl, eqlf, nc, nk, nl, ncl, nc_pi, nk_tau, nl_tau, nc_rho, nr_rho, max_iter, tol, verbose, newiter));
    return rcpp_result_gen;
END_RCPP
}
// fll
double fll(IntegerVector y, NumericVector par, int nobs, IntegerVector nvar, IntegerVector nlev, int nlv, int nrl, int nlf, int npi, int ntau, int nrho, IntegerVector ul, IntegerVector vl, IntegerVector lf, IntegerVector tr, IntegerVector rt, IntegerVector eqrl, IntegerVector eqlf, IntegerVector nc, IntegerVector nk, IntegerVector nl, IntegerVector ncl, IntegerVector nc_pi, IntegerVector nk_tau, IntegerVector nl_tau, IntegerVector nc_rho, IntegerVector nr_rho);
RcppExport SEXP _slcm_fll(SEXP ySEXP, SEXP parSEXP, SEXP nobsSEXP, SEXP nvarSEXP, SEXP nlevSEXP, SEXP nlvSEXP, SEXP nrlSEXP, SEXP nlfSEXP, SEXP npiSEXP, SEXP ntauSEXP, SEXP nrhoSEXP, SEXP ulSEXP, SEXP vlSEXP, SEXP lfSEXP, SEXP trSEXP, SEXP rtSEXP, SEXP eqrlSEXP, SEXP eqlfSEXP, SEXP ncSEXP, SEXP nkSEXP, SEXP nlSEXP, SEXP nclSEXP, SEXP nc_piSEXP, SEXP nk_tauSEXP, SEXP nl_tauSEXP, SEXP nc_rhoSEXP, SEXP nr_rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nvar(nvarSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nlev(nlevSEXP);
    Rcpp::traits::input_parameter< int >::type nlv(nlvSEXP);
    Rcpp::traits::input_parameter< int >::type nrl(nrlSEXP);
    Rcpp::traits::input_parameter< int >::type nlf(nlfSEXP);
    Rcpp::traits::input_parameter< int >::type npi(npiSEXP);
    Rcpp::traits::input_parameter< int >::type ntau(ntauSEXP);
    Rcpp::traits::input_parameter< int >::type nrho(nrhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ul(ulSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type vl(vlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type lf(lfSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tr(trSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type eqrl(eqrlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type eqlf(eqlfSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ncl(nclSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nc_pi(nc_piSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nk_tau(nk_tauSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nl_tau(nl_tauSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nc_rho(nc_rhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nr_rho(nr_rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(fll(y, par, nobs, nvar, nlev, nlv, nrl, nlf, npi, ntau, nrho, ul, vl, lf, tr, rt, eqrl, eqlf, nc, nk, nl, ncl, nc_pi, nk_tau, nl_tau, nc_rho, nr_rho));
    return rcpp_result_gen;
END_RCPP
}
// calcfreq2
List calcfreq2(IntegerVector mis, IntegerVector nrep, int nmis, IntegerVector freq, IntegerVector xobs, int nc, int N, double tol, int max_iter);
RcppExport SEXP _slcm_calcfreq2(SEXP misSEXP, SEXP nrepSEXP, SEXP nmisSEXP, SEXP freqSEXP, SEXP xobsSEXP, SEXP ncSEXP, SEXP NSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type mis(misSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nrep(nrepSEXP);
    Rcpp::traits::input_parameter< int >::type nmis(nmisSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type freq(freqSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type xobs(xobsSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(calcfreq2(mis, nrep, nmis, freq, xobs, nc, N, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// simModel
List simModel(int nobs, IntegerVector nvar, List nlev, NumericVector par, int nlv, int nrl, int nlf, int npi, int ntau, int nrho, IntegerVector ul, IntegerVector vl, IntegerVector lf, IntegerVector rt, IntegerVector eqrl, IntegerVector eqlf, IntegerVector nc, IntegerVector nk, IntegerVector nl, IntegerVector ncl, IntegerVector nc_pi, IntegerVector nk_tau, IntegerVector nl_tau, IntegerVector nc_rho, IntegerVector nr_rho);
RcppExport SEXP _slcm_simModel(SEXP nobsSEXP, SEXP nvarSEXP, SEXP nlevSEXP, SEXP parSEXP, SEXP nlvSEXP, SEXP nrlSEXP, SEXP nlfSEXP, SEXP npiSEXP, SEXP ntauSEXP, SEXP nrhoSEXP, SEXP ulSEXP, SEXP vlSEXP, SEXP lfSEXP, SEXP rtSEXP, SEXP eqrlSEXP, SEXP eqlfSEXP, SEXP ncSEXP, SEXP nkSEXP, SEXP nlSEXP, SEXP nclSEXP, SEXP nc_piSEXP, SEXP nk_tauSEXP, SEXP nl_tauSEXP, SEXP nc_rhoSEXP, SEXP nr_rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nvar(nvarSEXP);
    Rcpp::traits::input_parameter< List >::type nlev(nlevSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< int >::type nlv(nlvSEXP);
    Rcpp::traits::input_parameter< int >::type nrl(nrlSEXP);
    Rcpp::traits::input_parameter< int >::type nlf(nlfSEXP);
    Rcpp::traits::input_parameter< int >::type npi(npiSEXP);
    Rcpp::traits::input_parameter< int >::type ntau(ntauSEXP);
    Rcpp::traits::input_parameter< int >::type nrho(nrhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ul(ulSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type vl(vlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type lf(lfSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type eqrl(eqrlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type eqlf(eqlfSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ncl(nclSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nc_pi(nc_piSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nk_tau(nk_tauSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nl_tau(nl_tauSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nc_rho(nc_rhoSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nr_rho(nr_rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(simModel(nobs, nvar, nlev, par, nlv, nrl, nlf, npi, ntau, nrho, ul, vl, lf, rt, eqrl, eqlf, nc, nk, nl, ncl, nc_pi, nk_tau, nl_tau, nc_rho, nr_rho));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_slcm_log_add_exp", (DL_FUNC) &_slcm_log_add_exp, 2},
    {"_slcm_log_sum_exp", (DL_FUNC) &_slcm_log_sum_exp, 1},
    {"_slcm_calcModel", (DL_FUNC) &_slcm_calcModel, 29},
    {"_slcm_em_est", (DL_FUNC) &_slcm_em_est, 32},
    {"_slcm_fll", (DL_FUNC) &_slcm_fll, 27},
    {"_slcm_calcfreq2", (DL_FUNC) &_slcm_calcfreq2, 9},
    {"_slcm_simModel", (DL_FUNC) &_slcm_simModel, 25},
    {NULL, NULL, 0}
};

RcppExport void R_init_slcm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
